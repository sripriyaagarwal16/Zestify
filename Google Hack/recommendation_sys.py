# -*- coding: utf-8 -*-
"""Recommendation Sys

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1eTn407v7_ufM5tx9EuYwk-97xcZys8Xg
"""

!pip install ultralytics
!pip install opencv-python

import zipfile
import os

# Assuming your ZIP file is named 'dataset.zip'
zip_file_path = '/content/Dataset.zip'  # Change this to your uploaded zip file name
extract_folder = '/content/dataset'

# Create the extraction directory
os.makedirs(extract_folder, exist_ok=True)

# Extract the ZIP file
with zipfile.ZipFile(zip_file_path, 'r') as zip_ref:
    zip_ref.extractall(extract_folder)

print("Dataset extracted to:", extract_folder)

from ultralytics import YOLO
import cv2
from google.colab.patches import cv2_imshow

model = YOLO('yolov8n.pt')

with open('/content/dataset/Fuse/data.yaml', 'r') as file:
    data_yaml = file.read()
print(data_yaml)



new_model = model.train(data='/content/dataset/Fuse/data.yaml',epochs = 100, batch = 32 , optimizer = 'auto')

img = '/content/cadburys-fuse.jpg'
img_f = cv2.imread(img)
results = model(img_f)
annotated_img = results[0].plot()
cv2_imshow(annotated_img)

import pandas as pd
import numpy as np

import pandas as pd
import numpy as np
from sklearn.preprocessing import MinMaxScaler
import cv2
from ultralytics import YOLO

# Load product and user data
product_data = pd.read_csv("/content/Google hackathon - Sheet1 (1).csv")
user_data = pd.read_csv("synthetic_user_data_10000.csv")

# Normalize product data
scaler = MinMaxScaler()
scaled_product_data = product_data[['Calories (per 100gm )', 'Carbohydrates (g)',
                                     'Cholestrol(mg)', 'Calcium(mg)',
                                     'Sodium(mg)', 'Protein (g)', 'Sugar (g)', 'Fats (g)']]
scaled_product_data = pd.DataFrame(scaler.fit_transform(scaled_product_data), columns=scaled_product_data.columns)

# Combine the scaled data with other categorical columns
final_product_data = pd.concat([product_data[['Product Name', 'Category', 'Brand']], scaled_product_data], axis=1)

# Load YOLO model
model = YOLO('yolov8n.pt')  # Make sure to provide the correct path to the YOLO model

# Function to detect objects in an image
def detect_objects(image_path):
    image = cv2.imread(image_path)
    results = model.predict(source=image_path, conf=0.5)  # Adjust confidence as needed
    detected_products = []

    for result in results:
        for detection in result.boxes:
            label = result.names[int(detection.cls)]
            detected_products.append(label)

    return detected_products

# Recommendation system logic
def recommend_products(user_id, detected_products, final_product_data):
    # Fetch user profile
    user_profile = user_data[user_data['User_ID'] == user_id].iloc[0]
    condition = user_profile['Medical_Conditions']

    # Default: all products are suitable
    final_product_data['suitability'] = 1

    # Apply filtering rules based on user's medical condition
    if condition == 'Diabetes':
        final_product_data['suitability'] = np.where(final_product_data['Sugar (g)'] < 0.3, 1, 0)
    elif condition == 'Heart Disease':
        final_product_data['suitability'] = np.where((final_product_data['Sodium(mg)'] < 0.3) & (final_product_data['Fats (g)'] < 0.3), 1, 0)
    elif condition == 'Anemia':
        if 'Iron' in final_product_data.columns:
            final_product_data['suitability'] = np.where(final_product_data['Iron'] > 0.5, 1, 0)
    elif condition == 'Hypertension':
        final_product_data['suitability'] = np.where(final_product_data['Sodium(mg)'] < 0.2, 1, 0)
    elif condition == 'Obesity':
        final_product_data['suitability'] = np.where(final_product_data['Calories (per 100gm )'] < 0.3, 1, 0)
    elif condition == 'Osteoporosis':
        final_product_data['suitability'] = np.where(final_product_data['Calcium(mg)'] > 0.5, 1, 0)
    elif condition == 'High Cholesterol':
        final_product_data['suitability'] = np.where(final_product_data['Cholestrol(mg)'] < 0.2, 1, 0)

    # Apply dietary restrictions
    if 'Low Sugar' in user_profile['Dietary_Restrictions']:
        final_product_data = final_product_data[final_product_data['Sugar (g)'] < 0.4]
    if 'Low Sodium' in user_profile['Dietary_Restrictions']:
        final_product_data = final_product_data[final_product_data['Sodium(mg)'] < 0.3]
    if 'High Iron' in user_profile['Dietary_Restrictions'] and 'Iron' in final_product_data.columns:
        final_product_data = final_product_data[final_product_data['Iron'] > 0.5]

    # Filter products based on detected products
    detected_product_names = set(detected_products)  # Unique detected product names
    final_product_data = final_product_data[final_product_data['Product Name'].isin(detected_product_names)]

    # Check if there are suitable products after filtering
    if final_product_data.empty:
        print("No suitable products found for the user.")
        return pd.DataFrame()  # Return an empty DataFrame if nothing is found

    # Recommend suitable products
    recommended_products = final_product_data[final_product_data['suitability'] == 1]

    return recommended_products[['Product Name', 'Category', 'Brand',
                                  'Calories (per 100gm )', 'Sodium(mg)',
                                  'Sugar (g)']]

# Path to the image for detection
image_path = '/content/dataset/5star/test/images/5star15_jpeg.rf.b0a37e074d431de1be25e6c5c2714593.jpg'  # Replace with actual uploaded image path

# Detect products in the image
detected_products = detect_objects(image_path)

# Specify user ID (assuming you have the user's ID)
user_id = 1  # Replace with the actual user ID

# Get recommendations based on detected products and user data
recommended_products = recommend_products(user_id, detected_products, final_product_data)

# Display recommendations
print(recommended_products)

